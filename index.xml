<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>endeavouRs</title>
    <link>/</link>
    <description>Recent content on endeavouRs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy;2017 David Earl</copyright>
    <lastBuildDate>Sun, 01 Oct 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>DebarcodeR</title>
      <link>/portfolio/debarcoder/</link>
      <pubDate>Sun, 01 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/portfolio/debarcoder/</guid>
      <description>Intro
Our lab is developing tools to analyze patient specific effects of potential new chemotherapies using biopsy samples from patients being treated at Vanderbilt. This raises two challenges:
How do we obtain the maximal amount of information from these precious samples?How do we handle sample heterogeneity?To address the first issue we are using flow and mass cytometry which can measure dozens to hundreds of biomarkers on millions of single cells in a single run.</description>
    </item>
    
    <item>
      <title>Shiny modules all the way down</title>
      <link>/portfolio/shiny-modules-all-the-way-down/</link>
      <pubDate>Sun, 01 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/portfolio/shiny-modules-all-the-way-down/</guid>
      <description>As you begin using modules in your Shiny app, you will likely want to access reactive values from one module in a different module. There might also be instances where you want to use a module within another module and return reactive objects from the inner module to be used in the outer module. There are no limits to how many levels of module nesting you can have but some restraint should be used to maintain clairity.</description>
    </item>
    
    <item>
      <title>Shiny Module Basics</title>
      <link>/portfolio/shiny-module-basics/</link>
      <pubDate>Sun, 15 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/portfolio/shiny-module-basics/</guid>
      <description>Using Shiny Modules
Shiny modules provide a way to split complex Shiny apps into discrete functional units that can be used multiple times in a single app or reused in other apps. All input and output IDs in a Shiny app exist in the same global namespace which requires each ui and output object to have a unique id. Shiny modules use namespacing to ensure all IDs are unique. Each module consits of a ui function and a server function similiar to the standard Shiny app ui and server functions.</description>
    </item>
    
    <item>
      <title>Shiny App Basics</title>
      <link>/portfolio/shiny-app-basics/</link>
      <pubDate>Mon, 02 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/portfolio/shiny-app-basics/</guid>
      <description>Shiny is a package for making interactive R apps from RStudio.
Shiny apps consist of three main components:
a ui function
a server function
a call to shiny::runApp(ui = ui, server = server)The ui function returns genereated html for the apps user interface. Shiny has several built in ui functions with can be composed together to create the ui. These include functions for defining the layout of the app (e.</description>
    </item>
    
  </channel>
</rss>