<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Portfolios on endeavouRs</title>
    <link>/portfolio/</link>
    <description>Recent content in Portfolios on endeavouRs</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy;2017 David Earl</copyright>
    <lastBuildDate>Sun, 15 Oct 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="/portfolio/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Shiny Module Basics</title>
      <link>/portfolio/shiny-module-basics/</link>
      <pubDate>Sun, 15 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/portfolio/shiny-module-basics/</guid>
      <description>Using Shiny Modules
Shiny modules provide a way to split complex Shiny apps into discrete functional units that can be used multiple times in a single app or reused in other apps. All input and output IDs in a Shiny app exist in the same global namespace which requires each ui and output object to have a unique id. Shiny modules use namespacing to ensure all IDs are unique. Each module consits of a ui function and a server function similiar to the standard Shiny app ui and server functions.</description>
    </item>
    
    <item>
      <title>Shiny App Basics</title>
      <link>/portfolio/shiny-app-basics/</link>
      <pubDate>Mon, 02 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>/portfolio/shiny-app-basics/</guid>
      <description>Shiny is a package for making interactive R apps from RStudio.
Shiny apps consist of three main components:
a ui function
a server function
a call to shiny::runApp(ui = ui, server = server)The ui function returns genereated html for the apps user interface. Shiny has several built in ui functions with can be composed together to create the ui. These include functions for defining the layout of the app (e.</description>
    </item>
    
  </channel>
</rss>